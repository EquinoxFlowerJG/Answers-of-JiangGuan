/* 
  1.编写一个正则  可以匹配用户输入的手机号是否合法
  2.编写一个正则  可以匹配有效数字
  3.编写一个正则  可以匹配QQ邮箱
  4.编写一个正则  可以匹配身份证号码
  5.编写一个正则  可以匹配 18-65 之间的整数
  6.编写一个正则  可以匹配用户输入的密码是否符合规则；（8-18位 既有大写字母 又有小写字母 还得有数字） 不做要求
*/

// 1.编写一个正则  可以匹配用户输入的手机号是否合法
let reg1 = /^1[3-9]\d{9}$/;
console.log(reg1.test('19765280290'));

// 2.编写一个正则  可以匹配有效数字
// let reg2 = /^[-+]?(0\.\d+)|([1-9]\d*(\.\d+|\d*))$/;
// let reg2 = /^[+-]?([1-9]\d+|\d)(\.\d+)?$/;
// let reg2 = /^[+-]?([1-9]\d*|0)(\.\d+)?$/;
console.log(reg2.test('1.2.1'));


// 3.编写一个正则  可以匹配QQ邮箱（可以是qq号<5-11位>。可以是英文<8-15位>）
let reg3 = /^([1-9]\d{4,10}|[a-zA-Z]{8,15})@qq\.com$/i;
console.log(reg3.test('18560437382@qq.com'));

// 4.编写一个正则  可以匹配身份证号码（不能以0开头，后面5位正常，年月日不能超过20200407
let reg4 = /^[1-9]\d{5}(18|19|20)\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d{3}[0-9Xx]$/;
// let reg4 = /^[1-9]\d{5}((19|20)\d{2})(0[1-9]|1[0-2])(0[1-9]|[1-2]\d|3[01])\d{3}(\d|X)$/i;
console.log(reg4.test('37120219910410471X'));

// 5.编写一个正则  可以匹配 18-65 之间的整数
let reg5 = /^([2-5]\d)|18|19|(6[0-5])$/;
console.log(reg5.test(66));

// 6.编写一个正则  可以匹配用户输入的密码是否符合规则；（8-18位 既有大写字母 又有小写字母 还得有数字） 不做要求
let reg6 = /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]{8,18}$/;
//(?=.*\d) 表示必须得有数字，叫做“断言”，表示先行条件。

// 函数方式（判断）
function judge(str) {
  if (str.length < 8 || str.length > 18) return false;
  if(!/[A-Z]/.test(str))return false;
  if(!/[a-z]/.test(str))return false;
  if(!/\d/.test(str))return false;
  return true;
}